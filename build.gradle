import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id "cpp"
    id "java"
}

version '1.0'

sourceCompatibility = 1.17

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

ext{
    mindustryVersion = 'v146'
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    compileOnly fileTree(dir: 'xcore-plugin/build/libs', include: ['*.jar'])
}

model {
    platforms {
        aarch64 {
            architecture "aarch64"
        }
        x64 {
            architecture "x86_64"
        }
    }
    toolChains {
        gcc(Gcc) {
            path '/usr/bin'
            target("aarch64") {
                cCompiler.executable "aarch64-linux-gnu-gcc"
                cppCompiler.executable "aarch64-linux-gnu-g++"
                linker.executable "aarch64-linux-gnu-g++"
                assembler.executable "aarch64-linux-gnu-as"
                staticLibArchiver.executable "aarch64-linux-gnu-ar"
            }
        }
        VisualCpp(VisualCpp) {}
    }
    components {
        TileLogger(NativeLibrarySpec) {
            OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;
            if (os.isWindows()) {
                targetPlatform "x64"
            } else if (os.isLinux()) {
                targetPlatform "aarch64"
            }
            sources.cpp {
                source.srcDir "src/main/cpp"
                exportedHeaders.srcDirs "${project.projectDir}/src/main/h"
                exportedHeaders.srcDirs "${project.buildDir}/generated/sources/headers/java/main"
                exportedHeaders.srcDirs "${System.properties['java.home']}/include"
                exportedHeaders.srcDirs "${System.properties['java.home']}/include/linux"
                exportedHeaders.srcDirs "${System.properties['java.home']}/include/win32"
            }
            binaries.all {
                if (toolChain in Gcc) {
                    cppCompiler.args '-std=c++20'
                    cppCompiler.args '-O3'
                    cppCompiler.args '-DNDEBUG'
                    cppCompiler.args '-s'
                    cppCompiler.args '-Wall'
                }
                if (toolChain in VisualCpp) {
                    cppCompiler.args '/std:c++20'
                    cppCompiler.args '/EHsc'
                    cppCompiler.args '/W4'
                    cppCompiler.args '/WX'
                    cppCompiler.args '/Zi'
                    cppCompiler.args '/MDd'
                    linker.args '/DEBUG'
                }
            }
        }
    }
}

tasks.register('buildXCorePlugin', GradleBuild) {
    buildFile = 'xcore-plugin/build.gradle.kts'
    tasks = ['jar']
}

tasks.register("packLibToJar", Jar) {
    dependsOn assemble
    archiveFileName = "TileLoggerPacked.jar"

    from zipTree("build/libs/TileLogger.jar")
    from (file("build/libs/tileLogger/shared")) {
        include("*.so")
        include("*.dll")
    }
}

jar {
    dependsOn tasks.buildXCorePlugin
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveFileName = "${project.archivesBaseName}.jar"
    from{
        configurations.runtimeClasspath.collect{it.isDirectory() ? it : zipTree(it)}
    }

    from(rootDir){
        include "plugin.json"
    }
}

build {
    dependsOn tasks.packLibToJar
}

tasks.withType(CppCompile).configureEach {
    dependsOn jar
}